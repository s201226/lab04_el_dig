|ReflexCircuit
sw[0] => process_0.IN1
sw[1] => process_0.IN1
sw[2] => process_0.IN1
sw[3] => process_0.IN1
sw[4] => process_0.IN1
sw[5] => process_0.IN1
sw[6] => process_0.IN1
sw[7] => process_0.IN1
key[0] => Control:cu.key
clock_50 => SincCounterBCD_nbit:count.clk
clock_50 => Control:cu.clk
hex3[6] <= ScreenDriverBCD:screen.hex3[6]
hex3[5] <= ScreenDriverBCD:screen.hex3[5]
hex3[4] <= ScreenDriverBCD:screen.hex3[4]
hex3[3] <= ScreenDriverBCD:screen.hex3[3]
hex3[2] <= ScreenDriverBCD:screen.hex3[2]
hex3[1] <= ScreenDriverBCD:screen.hex3[1]
hex3[0] <= ScreenDriverBCD:screen.hex3[0]
hex2[6] <= ScreenDriverBCD:screen.hex2[6]
hex2[5] <= ScreenDriverBCD:screen.hex2[5]
hex2[4] <= ScreenDriverBCD:screen.hex2[4]
hex2[3] <= ScreenDriverBCD:screen.hex2[3]
hex2[2] <= ScreenDriverBCD:screen.hex2[2]
hex2[1] <= ScreenDriverBCD:screen.hex2[1]
hex2[0] <= ScreenDriverBCD:screen.hex2[0]
hex1[6] <= ScreenDriverBCD:screen.hex1[6]
hex1[5] <= ScreenDriverBCD:screen.hex1[5]
hex1[4] <= ScreenDriverBCD:screen.hex1[4]
hex1[3] <= ScreenDriverBCD:screen.hex1[3]
hex1[2] <= ScreenDriverBCD:screen.hex1[2]
hex1[1] <= ScreenDriverBCD:screen.hex1[1]
hex1[0] <= ScreenDriverBCD:screen.hex1[0]
hex0[6] <= ScreenDriverBCD:screen.hex0[6]
hex0[5] <= ScreenDriverBCD:screen.hex0[5]
hex0[4] <= ScreenDriverBCD:screen.hex0[4]
hex0[3] <= ScreenDriverBCD:screen.hex0[3]
hex0[2] <= ScreenDriverBCD:screen.hex0[2]
hex0[1] <= ScreenDriverBCD:screen.hex0[1]
hex0[0] <= ScreenDriverBCD:screen.hex0[0]
ledr[0] <= Control:cu.en_l
ledr[1] <= <GND>


|ReflexCircuit|SincCounterBCD_nbit:count
enable => in_tff.IN1
enable => SincCounter_nbit:gen_add:0:gen01:S1.enable
clk => SincCounter_nbit:gen_add:0:gen01:S1.clk
clk => SincCounter_nbit:gen_add:1:gen02:S2.clk
clk => SincCounter_nbit:gen_add:2:gen03:S3.clk
clk => SincCounter_nbit:gen_add:3:gen03:S3.clk
resetn => SincCounter_nbit:gen_add:0:gen01:S1.resetn
resetn => SincCounter_nbit:gen_add:1:gen02:S2.resetn
resetn => SincCounter_nbit:gen_add:2:gen03:S3.resetn
resetn => SincCounter_nbit:gen_add:3:gen03:S3.resetn
num[0] <= SincCounter_nbit:gen_add:0:gen01:S1.num[0]
num[1] <= SincCounter_nbit:gen_add:0:gen01:S1.num[1]
num[2] <= SincCounter_nbit:gen_add:0:gen01:S1.num[2]
num[3] <= SincCounter_nbit:gen_add:0:gen01:S1.num[3]
num[4] <= SincCounter_nbit:gen_add:1:gen02:S2.num[0]
num[5] <= SincCounter_nbit:gen_add:1:gen02:S2.num[1]
num[6] <= SincCounter_nbit:gen_add:1:gen02:S2.num[2]
num[7] <= SincCounter_nbit:gen_add:1:gen02:S2.num[3]
num[8] <= SincCounter_nbit:gen_add:2:gen03:S3.num[0]
num[9] <= SincCounter_nbit:gen_add:2:gen03:S3.num[1]
num[10] <= SincCounter_nbit:gen_add:2:gen03:S3.num[2]
num[11] <= SincCounter_nbit:gen_add:2:gen03:S3.num[3]
num[12] <= SincCounter_nbit:gen_add:3:gen03:S3.num[0]
num[13] <= SincCounter_nbit:gen_add:3:gen03:S3.num[1]
num[14] <= SincCounter_nbit:gen_add:3:gen03:S3.num[2]
num[15] <= SincCounter_nbit:gen_add:3:gen03:S3.num[3]


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:0:gen01:S1
enable => in_tff[1].IN1
enable => T_flip_flop:gen_add:0:gen01:T0.T
clk => T_flip_flop:gen_add:0:gen01:T0.clk
clk => T_flip_flop:gen_add:1:gen02:T0.clk
clk => T_flip_flop:gen_add:2:gen03:T0.clk
clk => T_flip_flop:gen_add:3:gen03:T0.clk
resetn => T_flip_flop:gen_add:0:gen01:T0.resetn
resetn => T_flip_flop:gen_add:1:gen02:T0.resetn
resetn => T_flip_flop:gen_add:2:gen03:T0.resetn
resetn => T_flip_flop:gen_add:3:gen03:T0.resetn
num[0] <= T_flip_flop:gen_add:0:gen01:T0.Q
num[1] <= T_flip_flop:gen_add:1:gen02:T0.Q
num[2] <= T_flip_flop:gen_add:2:gen03:T0.Q
num[3] <= T_flip_flop:gen_add:3:gen03:T0.Q


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:0:gen01:S1|T_flip_flop:\gen_add:0:gen01:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:0:gen01:S1|T_flip_flop:\gen_add:1:gen02:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:0:gen01:S1|T_flip_flop:\gen_add:2:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:0:gen01:S1|T_flip_flop:\gen_add:3:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:1:gen02:S2
enable => in_tff[1].IN1
enable => T_flip_flop:gen_add:0:gen01:T0.T
clk => T_flip_flop:gen_add:0:gen01:T0.clk
clk => T_flip_flop:gen_add:1:gen02:T0.clk
clk => T_flip_flop:gen_add:2:gen03:T0.clk
clk => T_flip_flop:gen_add:3:gen03:T0.clk
resetn => T_flip_flop:gen_add:0:gen01:T0.resetn
resetn => T_flip_flop:gen_add:1:gen02:T0.resetn
resetn => T_flip_flop:gen_add:2:gen03:T0.resetn
resetn => T_flip_flop:gen_add:3:gen03:T0.resetn
num[0] <= T_flip_flop:gen_add:0:gen01:T0.Q
num[1] <= T_flip_flop:gen_add:1:gen02:T0.Q
num[2] <= T_flip_flop:gen_add:2:gen03:T0.Q
num[3] <= T_flip_flop:gen_add:3:gen03:T0.Q


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:1:gen02:S2|T_flip_flop:\gen_add:0:gen01:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:1:gen02:S2|T_flip_flop:\gen_add:1:gen02:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:1:gen02:S2|T_flip_flop:\gen_add:2:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:1:gen02:S2|T_flip_flop:\gen_add:3:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:2:gen03:S3
enable => in_tff[1].IN1
enable => T_flip_flop:gen_add:0:gen01:T0.T
clk => T_flip_flop:gen_add:0:gen01:T0.clk
clk => T_flip_flop:gen_add:1:gen02:T0.clk
clk => T_flip_flop:gen_add:2:gen03:T0.clk
clk => T_flip_flop:gen_add:3:gen03:T0.clk
resetn => T_flip_flop:gen_add:0:gen01:T0.resetn
resetn => T_flip_flop:gen_add:1:gen02:T0.resetn
resetn => T_flip_flop:gen_add:2:gen03:T0.resetn
resetn => T_flip_flop:gen_add:3:gen03:T0.resetn
num[0] <= T_flip_flop:gen_add:0:gen01:T0.Q
num[1] <= T_flip_flop:gen_add:1:gen02:T0.Q
num[2] <= T_flip_flop:gen_add:2:gen03:T0.Q
num[3] <= T_flip_flop:gen_add:3:gen03:T0.Q


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:2:gen03:S3|T_flip_flop:\gen_add:0:gen01:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:2:gen03:S3|T_flip_flop:\gen_add:1:gen02:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:2:gen03:S3|T_flip_flop:\gen_add:2:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:2:gen03:S3|T_flip_flop:\gen_add:3:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:3:gen03:S3
enable => in_tff[1].IN1
enable => T_flip_flop:gen_add:0:gen01:T0.T
clk => T_flip_flop:gen_add:0:gen01:T0.clk
clk => T_flip_flop:gen_add:1:gen02:T0.clk
clk => T_flip_flop:gen_add:2:gen03:T0.clk
clk => T_flip_flop:gen_add:3:gen03:T0.clk
resetn => T_flip_flop:gen_add:0:gen01:T0.resetn
resetn => T_flip_flop:gen_add:1:gen02:T0.resetn
resetn => T_flip_flop:gen_add:2:gen03:T0.resetn
resetn => T_flip_flop:gen_add:3:gen03:T0.resetn
num[0] <= T_flip_flop:gen_add:0:gen01:T0.Q
num[1] <= T_flip_flop:gen_add:1:gen02:T0.Q
num[2] <= T_flip_flop:gen_add:2:gen03:T0.Q
num[3] <= T_flip_flop:gen_add:3:gen03:T0.Q


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:3:gen03:S3|T_flip_flop:\gen_add:0:gen01:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:3:gen03:S3|T_flip_flop:\gen_add:1:gen02:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:3:gen03:S3|T_flip_flop:\gen_add:2:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|SincCounterBCD_nbit:count|SincCounter_nbit:\gen_add:3:gen03:S3|T_flip_flop:\gen_add:3:gen03:T0
T => Q.OUTPUTSELECT
clk => Q~reg0.CLK
resetn => Q.OUTPUTSELECT
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|ScreenDriverBCD:screen
enable => decoder_7seg:gen01:1:dec01.enable
enable => decoder_7seg:gen01:2:dec01.enable
enable => decoder_7seg:gen01:3:dec01.enable
enable => decoder_7seg:gen01:4:dec01.enable
numBCD[0] => decoder_7seg:gen01:1:dec01.num[0]
numBCD[1] => decoder_7seg:gen01:1:dec01.num[1]
numBCD[2] => decoder_7seg:gen01:1:dec01.num[2]
numBCD[3] => decoder_7seg:gen01:1:dec01.num[3]
numBCD[4] => decoder_7seg:gen01:2:dec01.num[0]
numBCD[5] => decoder_7seg:gen01:2:dec01.num[1]
numBCD[6] => decoder_7seg:gen01:2:dec01.num[2]
numBCD[7] => decoder_7seg:gen01:2:dec01.num[3]
numBCD[8] => decoder_7seg:gen01:3:dec01.num[0]
numBCD[9] => decoder_7seg:gen01:3:dec01.num[1]
numBCD[10] => decoder_7seg:gen01:3:dec01.num[2]
numBCD[11] => decoder_7seg:gen01:3:dec01.num[3]
numBCD[12] => decoder_7seg:gen01:4:dec01.num[0]
numBCD[13] => decoder_7seg:gen01:4:dec01.num[1]
numBCD[14] => decoder_7seg:gen01:4:dec01.num[2]
numBCD[15] => decoder_7seg:gen01:4:dec01.num[3]
hex3[6] <= decoder_7seg:gen01:4:dec01.to_hex[6]
hex3[5] <= decoder_7seg:gen01:4:dec01.to_hex[5]
hex3[4] <= decoder_7seg:gen01:4:dec01.to_hex[4]
hex3[3] <= decoder_7seg:gen01:4:dec01.to_hex[3]
hex3[2] <= decoder_7seg:gen01:4:dec01.to_hex[2]
hex3[1] <= decoder_7seg:gen01:4:dec01.to_hex[1]
hex3[0] <= decoder_7seg:gen01:4:dec01.to_hex[0]
hex2[6] <= decoder_7seg:gen01:3:dec01.to_hex[6]
hex2[5] <= decoder_7seg:gen01:3:dec01.to_hex[5]
hex2[4] <= decoder_7seg:gen01:3:dec01.to_hex[4]
hex2[3] <= decoder_7seg:gen01:3:dec01.to_hex[3]
hex2[2] <= decoder_7seg:gen01:3:dec01.to_hex[2]
hex2[1] <= decoder_7seg:gen01:3:dec01.to_hex[1]
hex2[0] <= decoder_7seg:gen01:3:dec01.to_hex[0]
hex1[6] <= decoder_7seg:gen01:2:dec01.to_hex[6]
hex1[5] <= decoder_7seg:gen01:2:dec01.to_hex[5]
hex1[4] <= decoder_7seg:gen01:2:dec01.to_hex[4]
hex1[3] <= decoder_7seg:gen01:2:dec01.to_hex[3]
hex1[2] <= decoder_7seg:gen01:2:dec01.to_hex[2]
hex1[1] <= decoder_7seg:gen01:2:dec01.to_hex[1]
hex1[0] <= decoder_7seg:gen01:2:dec01.to_hex[0]
hex0[6] <= decoder_7seg:gen01:1:dec01.to_hex[6]
hex0[5] <= decoder_7seg:gen01:1:dec01.to_hex[5]
hex0[4] <= decoder_7seg:gen01:1:dec01.to_hex[4]
hex0[3] <= decoder_7seg:gen01:1:dec01.to_hex[3]
hex0[2] <= decoder_7seg:gen01:1:dec01.to_hex[2]
hex0[1] <= decoder_7seg:gen01:1:dec01.to_hex[1]
hex0[0] <= decoder_7seg:gen01:1:dec01.to_hex[0]


|ReflexCircuit|ScreenDriverBCD:screen|decoder_7seg:\gen01:1:dec01
num[0] => Mux0.IN19
num[0] => Mux1.IN19
num[0] => Mux2.IN19
num[0] => Mux3.IN19
num[0] => Mux4.IN19
num[0] => Mux5.IN19
num[0] => Mux6.IN19
num[1] => Mux0.IN18
num[1] => Mux1.IN18
num[1] => Mux2.IN18
num[1] => Mux3.IN18
num[1] => Mux4.IN18
num[1] => Mux5.IN18
num[1] => Mux6.IN18
num[2] => Mux0.IN17
num[2] => Mux1.IN17
num[2] => Mux2.IN17
num[2] => Mux3.IN17
num[2] => Mux4.IN17
num[2] => Mux5.IN17
num[2] => Mux6.IN17
num[3] => Mux0.IN16
num[3] => Mux1.IN16
num[3] => Mux2.IN16
num[3] => Mux3.IN16
num[3] => Mux4.IN16
num[3] => Mux5.IN16
num[3] => Mux6.IN16
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
to_hex[6] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[5] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[4] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[3] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[2] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[1] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[0] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|ScreenDriverBCD:screen|decoder_7seg:\gen01:2:dec01
num[0] => Mux0.IN19
num[0] => Mux1.IN19
num[0] => Mux2.IN19
num[0] => Mux3.IN19
num[0] => Mux4.IN19
num[0] => Mux5.IN19
num[0] => Mux6.IN19
num[1] => Mux0.IN18
num[1] => Mux1.IN18
num[1] => Mux2.IN18
num[1] => Mux3.IN18
num[1] => Mux4.IN18
num[1] => Mux5.IN18
num[1] => Mux6.IN18
num[2] => Mux0.IN17
num[2] => Mux1.IN17
num[2] => Mux2.IN17
num[2] => Mux3.IN17
num[2] => Mux4.IN17
num[2] => Mux5.IN17
num[2] => Mux6.IN17
num[3] => Mux0.IN16
num[3] => Mux1.IN16
num[3] => Mux2.IN16
num[3] => Mux3.IN16
num[3] => Mux4.IN16
num[3] => Mux5.IN16
num[3] => Mux6.IN16
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
to_hex[6] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[5] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[4] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[3] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[2] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[1] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[0] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|ScreenDriverBCD:screen|decoder_7seg:\gen01:3:dec01
num[0] => Mux0.IN19
num[0] => Mux1.IN19
num[0] => Mux2.IN19
num[0] => Mux3.IN19
num[0] => Mux4.IN19
num[0] => Mux5.IN19
num[0] => Mux6.IN19
num[1] => Mux0.IN18
num[1] => Mux1.IN18
num[1] => Mux2.IN18
num[1] => Mux3.IN18
num[1] => Mux4.IN18
num[1] => Mux5.IN18
num[1] => Mux6.IN18
num[2] => Mux0.IN17
num[2] => Mux1.IN17
num[2] => Mux2.IN17
num[2] => Mux3.IN17
num[2] => Mux4.IN17
num[2] => Mux5.IN17
num[2] => Mux6.IN17
num[3] => Mux0.IN16
num[3] => Mux1.IN16
num[3] => Mux2.IN16
num[3] => Mux3.IN16
num[3] => Mux4.IN16
num[3] => Mux5.IN16
num[3] => Mux6.IN16
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
to_hex[6] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[5] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[4] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[3] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[2] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[1] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[0] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|ScreenDriverBCD:screen|decoder_7seg:\gen01:4:dec01
num[0] => Mux0.IN19
num[0] => Mux1.IN19
num[0] => Mux2.IN19
num[0] => Mux3.IN19
num[0] => Mux4.IN19
num[0] => Mux5.IN19
num[0] => Mux6.IN19
num[1] => Mux0.IN18
num[1] => Mux1.IN18
num[1] => Mux2.IN18
num[1] => Mux3.IN18
num[1] => Mux4.IN18
num[1] => Mux5.IN18
num[1] => Mux6.IN18
num[2] => Mux0.IN17
num[2] => Mux1.IN17
num[2] => Mux2.IN17
num[2] => Mux3.IN17
num[2] => Mux4.IN17
num[2] => Mux5.IN17
num[2] => Mux6.IN17
num[3] => Mux0.IN16
num[3] => Mux1.IN16
num[3] => Mux2.IN16
num[3] => Mux3.IN16
num[3] => Mux4.IN16
num[3] => Mux5.IN16
num[3] => Mux6.IN16
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
enable => to_hex.OUTPUTSELECT
to_hex[6] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[5] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[4] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[3] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[2] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[1] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE
to_hex[0] <= to_hex.DB_MAX_OUTPUT_PORT_TYPE


|ReflexCircuit|Control:cu
key => to_ff.OUTPUTSELECT
key => to_ff.OUTPUTSELECT
key => to_ff.RESET.DATAB
key => to_ff.COUNT02.DATAB
key => Selector0.IN1
key => Selector2.IN1
key => Selector3.IN1
key => Selector3.IN2
start => to_ff.DATAB
start => Selector2.IN3
start => to_ff.DATAB
start => Selector1.IN1
clk => state~1.DATAIN
en_c <= en_c.DB_MAX_OUTPUT_PORT_TYPE
en_s <= en_s.DB_MAX_OUTPUT_PORT_TYPE
en_l <= en_l.DB_MAX_OUTPUT_PORT_TYPE
resetn <= resetn.DB_MAX_OUTPUT_PORT_TYPE


